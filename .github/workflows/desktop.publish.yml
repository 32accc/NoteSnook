name: Publish @notesnook/desktop

on:
  workflow_dispatch:
    inputs:
      release:
        type: boolean
        required: true
        default: false
        description: "Release after successful build?"

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: "npm"
          cache-dependency-path: |
            apps/mobile/package-lock.json
            apps/web/package-lock.json
            packages/core/package-lock.json
            packages/crypto/package-lock.json
            packages/crypto-worker/package-lock.json
            packages/editor-mobile/package-lock.json
            packages/editor/package-lock.json
            packages/logger/package-lock.json
            packages/streamable-fs/package-lock.json
            packages/theme/package-lock.json

      - name: Install packages
        run: |
          npm i --ignore-scripts --prefer-offline --no-audit
          npx lerna bootstrap --ignore=@notesnook/mobile -- --prefer-offline --no-audit

      - name: Setup environment
        run: |
          echo "NX_CLOUD_ACCESS_TOKEN=${{ secrets.NX_CLOUD_ACCESS_TOKEN }}" >> $GITHUB_ENV

      - name: Generate desktop build
        run: npx nx build:desktop @notesnook/web

      - name: Archive build artifact
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: apps/web/build/**/*

  build-macos:
    name: Build macOS
    needs: build
    runs-on: macos-12

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: Download build
        uses: actions/download-artifact@v3
        with:
          name: build
          path: ./apps/web/desktop/build

      - name: Install packages
        run: npm i
        working-directory: ./apps/web/desktop

      - name: Build Electron app
        run: npm run build
        working-directory: ./apps/web/desktop

      - name: Setup notarization
        run: |
          mkdir -p ~/private_keys/
          echo '${{ secrets.api_key }}' > ~/private_keys/AuthKey_${{ secrets.api_key_id }}.p8
      
      - name: Install provisioning profile
        run: echo "${{ secrets.MAC_PROVISIONING_PROFILE }}" | base64 --decode > embedded.provisionprofile

      - name: Deploy to Testflight
        env:
          CSC_LINK: ${{ secrets.mac_certs }}
          CSC_KEY_PASSWORD: ${{ secrets.mac_certs_password }}
          API_KEY_ID: ${{ secrets.api_key_id }}
          API_KEY_ISSUER_ID: ${{ secrets.api_key_issuer_id }}
          DEBUG: electron-osx-sign*
        run: |
          apple_app_id=$(cat package.json | jq -r .mac.appId)
          app_bundle_id=$(cat package.json | jq -r .mac.bundleId)
          app_version=$(cat package.json | jq -r .version)
          bundle_version=$(cat package.json | jq -r .mac.bundleVersion)

          echo "Building package ${app_version} ${bundle_version} ..."
          npx electron-builder --mac mas --universal -p never
          
          package=$(find ./dist/mas-universal/notesnook*.pkg)

          echo "Uploading ${package} using altool..."

          xcrun altool --upload-package $package -t osx --apiKey $API_KEY_ID --apiIssuer $API_KEY_ISSUER_ID --apple-id $apple_app_id --bundle-id $app_bundle_id --bundle-short-version-string $app_version --bundle-version $bundle_version
        working-directory: ./apps/web/desktop     
  # publish:
  #   name: Publish
  #   needs: build
  #   runs-on: ${{ matrix.os }}

  #   # Platforms to build on/for
  #   strategy:
  #     matrix:
  #       os: [macos-12]

  #   steps:
      # - name: Check out Git repository
      #   uses: actions/checkout@v3

      # - name: Setup Node
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: 16.x

      # - name: Download build
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: build
      #     path: ./apps/web/desktop/build

  #     - name: Setup Snapcraft Auth
  #       if: startsWith(matrix.os, 'ubuntu')
  #       run: echo "SNAPCRAFT_STORE_CREDENTIALS=${{ secrets.snapcraft_token }}" >> $GITHUB_ENV

  #     - name: Install Snapcraft
  #       uses: samuelmeuli/action-snapcraft@v1
  #       if: startsWith(matrix.os, 'ubuntu')



      # - name: Build (macOS)
      #   if: startsWith(matrix.os, 'macos')
      #   run: |
          

  #     - name: Publish on Snapcraft
  #       if: startsWith(matrix.os, 'ubuntu')
  #       run: |
  #         version=$(cat package.json | jq .version | cut -d '"' -f 2)
  #         is_published=$(snapcraft status notesnook | grep "${version}" | grep "stable" | wc -l)

  #         if [ ! $is_published -eq 1 ]
  #         then
  #             snapcraft upload --release=stable ./dist/notesnook_linux_amd64.snap
  #         else
  #             echo "Already published."
  #         fi
  #       working-directory: ./apps/web/desktop

